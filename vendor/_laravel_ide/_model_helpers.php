<?php

namespace App\Models {

  /**
   * App\Models\Event
   *
   * @property string|null $eventRemarks
   * @property string|null $locationID
   * @property string|null $fieldNotes
   * @property string|null $samplingProtocol
   * @property string|null $habitat
   * @property int|null $day
   * @property int|null $month
   * @property int|null $year
   * @property string|null $eventTime
   * @property string|null $eventDate
   * @property string|null $parentEventID
   * @property string $eventID
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereEventid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereParenteventid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereEventdate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereEventtime($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereYear($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereMonth($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereDay($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereHabitat($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereSamplingprotocol($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereFieldnotes($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereLocationid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event whereEventremarks($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Event>|Event query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Event extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Identification
   *
   * @property string|null $identificationRemarks
   * @property int|null $identificationVerificationStatus
   * @property string|null $dateIdentified
   * @property string|null $identifiedBy
   * @property int|null $typeStatus
   * @property string|null $identificationQualifier
   * @property string $identificationID
   * @property-read \App\Models\Vocab\Identification\Typestatus $typeStatusRef
   * @property-read \App\Models\Vocab\Identification\Verificationstatus $verificationStatusRef
   * @method static \Illuminate\Database\Eloquent\Builder<Identification>|Identification whereIdentificationid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Identification>|Identification whereIdentificationqualifier($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Identification>|Identification whereTypestatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Identification>|Identification whereIdentifiedby($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Identification>|Identification whereDateidentified($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Identification>|Identification whereIdentificationverificationstatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Identification>|Identification whereIdentificationremarks($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Identification>|Identification newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Identification>|Identification newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Identification>|Identification query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Identification extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\IkiambioUser
   *
   * @property \Illuminate\Support\Carbon|null $lastLogin
   * @property \Illuminate\Support\Carbon|null $modifiedDate
   * @property \Illuminate\Support\Carbon|null $createdDate
   * @property string $username
   * @property string|null $identification
   * @property string $lastName
   * @property string $firstName
   * @property string|null $utplId
   * @property int $id
   * @property-read mixed $full_name
   * @method static \Illuminate\Database\Eloquent\Builder<IkiambioUser>|IkiambioUser whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<IkiambioUser>|IkiambioUser whereUtplid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<IkiambioUser>|IkiambioUser whereFirstname($value)
   * @method static \Illuminate\Database\Eloquent\Builder<IkiambioUser>|IkiambioUser whereLastname($value)
   * @method static \Illuminate\Database\Eloquent\Builder<IkiambioUser>|IkiambioUser whereIdentification($value)
   * @method static \Illuminate\Database\Eloquent\Builder<IkiambioUser>|IkiambioUser whereUsername($value)
   * @method static \Illuminate\Database\Eloquent\Builder<IkiambioUser>|IkiambioUser whereCreateddate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<IkiambioUser>|IkiambioUser whereModifieddate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<IkiambioUser>|IkiambioUser whereLastlogin($value)
   * @method static \Illuminate\Database\Eloquent\Builder<IkiambioUser>|IkiambioUser newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<IkiambioUser>|IkiambioUser newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<IkiambioUser>|IkiambioUser query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class IkiambioUser extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Location
   *
   * @property string|null $georeferenceRemarks
   * @property int $georeferenceVerificationStatus
   * @property date:Y-m-d|null $georeferencedDate
   * @property string|null $georeferencedBy
   * @property int $verbatimSRS
   * @property string|null $verbatimCoordinateSystem
   * @property string|null $verbatimLongitude
   * @property string|null $verbatimLatitude
   * @property string|null $geodeticDatum
   * @property float|null $decimalLongitude
   * @property float|null $decimalLatitude
   * @property string|null $locationRemarks
   * @property string|null $verbatimDepth
   * @property string|null $verbatimElevation
   * @property string|null $verbatimLocality
   * @property string|null $locality
   * @property string|null $municipality
   * @property string|null $county
   * @property string|null $stateProvince
   * @property string|null $countryCode
   * @property string|null $country
   * @property string|null $island
   * @property string|null $islandGroup
   * @property string|null $waterBody
   * @property int $continent
   * @property string|null $higherGeographyID
   * @property string|null $id_INEC
   * @property string $locationID
   * @property-read \App\Models\Vocab\Location\Continent $continentRef
   * @property-read \App\Models\Vocab\Location\Verbatimsrs $verbatimSrsRef
   * @property-read \App\Models\Vocab\Location\GeorefStatus $georefStatusRef
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereLocationid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereIdInec($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereHighergeographyid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereContinent($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereWaterbody($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereIslandgroup($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereIsland($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereCountry($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereCountrycode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereStateprovince($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereCounty($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereMunicipality($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereLocality($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereVerbatimlocality($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereVerbatimelevation($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereVerbatimdepth($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereLocationremarks($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereDecimallatitude($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereDecimallongitude($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereGeodeticdatum($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereVerbatimlatitude($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereVerbatimlongitude($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereVerbatimcoordinatesystem($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereVerbatimsrs($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereGeoreferencedby($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereGeoreferenceddate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereGeoreferenceverificationstatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereGeoreferenceremarks($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Location extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Measurementorfacts
   *
   * @property string|null $measurementRemarks
   * @property string|null $measurementMethod
   * @property string|null $measurementDeterminedDate
   * @property string|null $measurementDeterminedBy
   * @property string|null $measurementUnit
   * @property string|null $measurementAccuracy
   * @property string|null $measurementValue
   * @property string|null $measurementType
   * @property string|null $id_occ_bd
   * @property string $measurementID
   * @method static \Illuminate\Database\Eloquent\Builder<Measurementorfacts>|Measurementorfacts whereMeasurementid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Measurementorfacts>|Measurementorfacts whereIdOccBd($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Measurementorfacts>|Measurementorfacts whereMeasurementtype($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Measurementorfacts>|Measurementorfacts whereMeasurementvalue($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Measurementorfacts>|Measurementorfacts whereMeasurementaccuracy($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Measurementorfacts>|Measurementorfacts whereMeasurementunit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Measurementorfacts>|Measurementorfacts whereMeasurementdeterminedby($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Measurementorfacts>|Measurementorfacts whereMeasurementdetermineddate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Measurementorfacts>|Measurementorfacts whereMeasurementmethod($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Measurementorfacts>|Measurementorfacts whereMeasurementremarks($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Measurementorfacts>|Measurementorfacts newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Measurementorfacts>|Measurementorfacts newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Measurementorfacts>|Measurementorfacts query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Measurementorfacts extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Occurrence
   *
   * @property string|null $identificationID
   * @property string|null $taxonID
   * @property string|null $locationID
   * @property string|null $organismID
   * @property string|null $occurrenceRemarks
   * @property string|null $otherCatalogNumbers
   * @property string|null $associatedTaxa
   * @property string|null $associatedSequences
   * @property string|null $associatedMedia
   * @property int $disposition
   * @property string|null $preparations
   * @property int $establishmentMeans
   * @property string|null $substrate
   * @property string|null $behavior
   * @property int $reproductiveCondition
   * @property int $lifeStage
   * @property int $sex
   * @property int $organismQuantityType
   * @property float|null $organismQuantity
   * @property integer|null $individualCount
   * @property string|null $recordedBy
   * @property string|null $recordNumber
   * @property string|null $catalogNumber
   * @property int|null $record_level_id
   * @property string|null $occurrenceID
   * @property int $id_occ_bd
   * @property-read \App\Models\RecordLevel $recordLevelRef
   * @property-read \App\Models\Vocab\Occurrence\Organismquantitytype $organismQuantityTypeRef
   * @property-read \App\Models\Vocab\Occurrence\Sex $sexRef
   * @property-read \App\Models\Vocab\Occurrence\Lifestage $lifeStageRef
   * @property-read \App\Models\Vocab\Occurrence\Reproductivecondition $reproductiveConditionRef
   * @property-read \App\Models\Vocab\Occurrence\Establishmentmeans $establishmentMeansRef
   * @property-read \App\Models\Vocab\Occurrence\Disposition $dispositionRef
   * @property-read \App\Models\Organism $organismRef
   * @property-read \App\Models\Location $locationRef
   * @property-read \App\Models\Taxon $taxonRef
   * @property-read \App\Models\Identification $identificationRef
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereIdOccBd($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereOccurrenceid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereRecordLevelId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereCatalognumber($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereRecordnumber($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereRecordedby($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereIndividualcount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereOrganismquantity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereOrganismquantitytype($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereSex($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereLifestage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereReproductivecondition($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereBehavior($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereSubstrate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereEstablishmentmeans($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence wherePreparations($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereDisposition($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereAssociatedmedia($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereAssociatedsequences($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereAssociatedtaxa($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereOthercatalognumbers($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereOccurrenceremarks($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereOrganismid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereLocationid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereTaxonid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence whereIdentificationid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Occurrence>|Occurrence query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Occurrence extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Organism
   *
   * @property string|null $previousIdentifications
   * @property string|null $associatedOrganisms
   * @property string|null $associatedOccurrences
   * @property string $organismID
   * @method static \Illuminate\Database\Eloquent\Builder<Organism>|Organism whereOrganismid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Organism>|Organism whereAssociatedoccurrences($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Organism>|Organism whereAssociatedorganisms($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Organism>|Organism wherePreviousidentifications($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Organism>|Organism newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Organism>|Organism newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Organism>|Organism query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Organism extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\RecordLevel
   *
   * @property string|null $dataGeneralizations
   * @property string|null $informationWithheld
   * @property int $basisOfRecord
   * @property int $ownerInstitutionCode
   * @property string|null $datasetName
   * @property int $collectionCode
   * @property int $institutionCode
   * @property string|null $datasetID
   * @property int $collectionID
   * @property int $institutionID
   * @property string|null $references
   * @property string|null $bibliographicCitation
   * @property int $accessRights
   * @property int $rightsHolder
   * @property int $license
   * @property string|null $language
   * @property \Illuminate\Support\Carbon|null $modified
   * @property int $type
   * @property int $record_level_id
   * @property-read \App\Models\Vocab\RecordLevel\Type $typeRef
   * @property-read \App\Models\Vocab\RecordLevel\License $licenseRef
   * @property-read \App\Models\Vocab\RecordLevel\RightsHolder $rightsHolderRef
   * @property-read \App\Models\Vocab\RecordLevel\Accessrights $accessRightsRef
   * @property-read \App\Models\Vocab\RecordLevel\Institutionid $institutionIdRef
   * @property-read \App\Models\Vocab\RecordLevel\Collectionid $collectionIdRef
   * @property-read \App\Models\Vocab\RecordLevel\Institutioncode $institutionCodeRef
   * @property-read \App\Models\Vocab\RecordLevel\Collectioncode $collectionCodeRef
   * @property-read \App\Models\Vocab\RecordLevel\Ownerinstitutioncode $ownerInstitutionCodeRef
   * @property-read \App\Models\Vocab\RecordLevel\Basisofrecord $basisOfRecordRef
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereRecordLevelId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereModified($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereLanguage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereLicense($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereRightsholder($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereAccessrights($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereBibliographiccitation($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereReferences($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereInstitutionid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereCollectionid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereDatasetid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereInstitutioncode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereCollectioncode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereDatasetname($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereOwnerinstitutioncode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereBasisofrecord($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereInformationwithheld($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel whereDatageneralizations($value)
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<RecordLevel>|RecordLevel query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class RecordLevel extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Taxon
   *
   * @property string|null $taxonRemarks
   * @property int|null $taxonomicStatus
   * @property string|null $vernacularName
   * @property string|null $scientificNameAuthorship
   * @property string|null $verbatimTaxonRank
   * @property int|null $taxonRank
   * @property string|null $intraspecificEpithet
   * @property string|null $specificEpithet
   * @property string|null $subgenus
   * @property string|null $genus
   * @property string|null $family
   * @property string|null $order
   * @property string|null $class
   * @property string|null $phylum
   * @property string|null $kingdom
   * @property string|null $higherClassification
   * @property int|null $namePublishedInYear
   * @property string|null $namePublishedIn
   * @property string|null $scientificName
   * @property string|null $scientificNameID
   * @property string $taxonID
   * @property-read \App\Models\Vocab\Taxon\Taxonrank $taxonRankRef
   * @property-read \App\Models\Vocab\Taxon\Taxonomicstatus $taxonomicStatusRef
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereTaxonid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereScientificnameid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereScientificname($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereNamepublishedin($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereNamepublishedinyear($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereHigherclassification($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereKingdom($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon wherePhylum($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereClass($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereOrder($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereFamily($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereGenus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereSubgenus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereSpecificepithet($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereIntraspecificepithet($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereTaxonrank($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereVerbatimtaxonrank($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereScientificnameauthorship($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereVernacularname($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereTaxonomicstatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon whereTaxonremarks($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Taxon>|Taxon query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Taxon extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Tblextractions
   *
   * @property string|null $qualityRemarks
   * @property string|null $extractionStaff
   * @property string|null $codigoGermoplasmaBiobanco
   * @property string|null $codigoADNBiobanco
   * @property string|null $codigoMuestraBiobanco
   * @property string|null $sieving
   * @property string|null $qualityCheckDate
   * @property string|null $quality
   * @property string|null $preservationDateBegin
   * @property string|null $preservationTemperature
   * @property string|null $preservationType
   * @property float|null $ratioOfAbsorbance260_230
   * @property float|null $ratioOfAbsorbance260_280
   * @property string|null $concentrationUnit
   * @property float|null $concentration
   * @property string|null $volumeUnit
   * @property float|null $volume
   * @property bool|null $adn_enSTOCK
   * @property string|null $methodDeterminationConcentrationAndRatios
   * @property string|null $purificationMethod
   * @property string|null $fechaExtraccion
   * @property string|null $idRegistros
   * @property string|null $materialSampleType
   * @property string|null $id_occ_bd
   * @property string $idExtracciones
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereIdextracciones($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereIdOccBd($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereMaterialsampletype($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereIdregistros($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereFechaextraccion($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions wherePurificationmethod($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereMethoddeterminationconcentrationandratios($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereAdnEnstock($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereVolume($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereVolumeunit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereConcentration($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereConcentrationunit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereRatioofabsorbance260280($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereRatioofabsorbance260230($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions wherePreservationtype($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions wherePreservationtemperature($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions wherePreservationdatebegin($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereQuality($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereQualitycheckdate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereSieving($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereCodigomuestrabiobanco($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereCodigoadnbiobanco($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereCodigogermoplasmabiobanco($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereExtractionstaff($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions whereQualityremarks($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Tblextractions>|Tblextractions query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Tblextractions extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Tblfechapcr
   *
   * @property string|null $imagenPCR
   * @property string|null $imagenPCRAccessionURI
   * @property int|null $ciclos
   * @property int|null $final_c
   * @property int|null $post_tiempo
   * @property int|null $post_c
   * @property int|null $pcr3tiempo
   * @property int|null $pcr3_c
   * @property int|null $pcr2tiempo
   * @property int|null $pcr2_c
   * @property int|null $pcr1tiempo
   * @property int|null $pcr1_c
   * @property int|null $pretiempo
   * @property int|null $pre_c
   * @property string|null $equipo_PCR
   * @property int|null $adn
   * @property int|null $taq
   * @property float|null $primer_R
   * @property float|null $primer_F
   * @property float|null $dntp
   * @property float|null $mgcl
   * @property float|null $bsa
   * @property float|null $buffer
   * @property float|null $clh20
   * @property float|null $masterMix
   * @property float|null $volumen_finalRx
   * @property int|null $num_reacciones
   * @property string|null $amplificationStaff
   * @property string|null $lugar_process
   * @property string|null $amplificationMethod
   * @property string|null $amplificationDate
   * @property string $idFechaPCR
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereIdfechapcr($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereAmplificationdate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereAmplificationmethod($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereLugarProcess($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereAmplificationstaff($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereNumReacciones($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereVolumenFinalrx($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereMastermix($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereClh20($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereBuffer($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereBsa($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereMgcl($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereDntp($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr wherePrimerF($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr wherePrimerR($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereTaq($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereAdn($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereEquipoPcr($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr wherePreC($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr wherePretiempo($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr wherePcr1C($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr wherePcr1Tiempo($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr wherePcr2C($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr wherePcr2Tiempo($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr wherePcr3C($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr wherePcr3Tiempo($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr wherePostC($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr wherePostTiempo($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereFinalC($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereCiclos($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereImagenpcraccessionuri($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr whereImagenpcr($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Tblfechapcr>|Tblfechapcr query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Tblfechapcr extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Tblmultimedia
   *
   * @property string|null $license
   * @property string|null $publisher
   * @property string|null $contributor
   * @property string|null $creator
   * @property string|null $created
   * @property string|null $description
   * @property string|null $title
   * @property string|null $identifier
   * @property string|null $format
   * @property string|null $type
   * @property string|null $idRegistros
   * @property string $idMultimedia
   * @method static \Illuminate\Database\Eloquent\Builder<Tblmultimedia>|Tblmultimedia whereIdmultimedia($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblmultimedia>|Tblmultimedia whereIdregistros($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblmultimedia>|Tblmultimedia whereType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblmultimedia>|Tblmultimedia whereFormat($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblmultimedia>|Tblmultimedia whereIdentifier($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblmultimedia>|Tblmultimedia whereTitle($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblmultimedia>|Tblmultimedia whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblmultimedia>|Tblmultimedia whereCreated($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblmultimedia>|Tblmultimedia whereCreator($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblmultimedia>|Tblmultimedia whereContributor($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblmultimedia>|Tblmultimedia wherePublisher($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblmultimedia>|Tblmultimedia whereLicense($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblmultimedia>|Tblmultimedia newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Tblmultimedia>|Tblmultimedia newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Tblmultimedia>|Tblmultimedia query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Tblmultimedia extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Tblprimersf
   *
   * @property string|null $proveedor
   * @property string|null $fecha_orden
   * @property string|null $primerStaff
   * @property float|null $annealing_Temperature
   * @property float|null $dnaMeltingPoint
   * @property float|null $gc
   * @property int|null $Longitud_amplicon
   * @property int|null $longitud_Primer
   * @property string|null $proyecto_Tesis
   * @property string|null $tecnologia
   * @property string|null $region
   * @property string|null $grupo_Taxonomico
   * @property int $id_primerDirection
   * @property string|null $primerReferenceCitation
   * @property string|null $primerSequence
   * @property string|null $primerName
   * @property string|null $genName
   * @property string|null $genAbrev
   * @property string $idPrimers
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf whereIdprimers($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf whereGenabrev($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf whereGenname($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf wherePrimername($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf wherePrimersequence($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf wherePrimerreferencecitation($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf whereIdPrimerdirection($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf whereGrupoTaxonomico($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf whereRegion($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf whereTecnologia($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf whereProyectoTesis($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf whereLongitudPrimer($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf whereLongitudAmplicon($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf whereGc($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf whereDnameltingpoint($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf whereAnnealingTemperature($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf wherePrimerstaff($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf whereFechaOrden($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf whereProveedor($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersf>|Tblprimersf query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Tblprimersf extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Tblprimersr
   *
   * @property string|null $proveedor
   * @property string|null $fecha_orden
   * @property string|null $primerStaff
   * @property float|null $annealing_Temperature
   * @property float|null $dnaMeltingPoint
   * @property float|null $gc
   * @property int|null $Longitud_amplicon
   * @property int|null $longitud_Primer
   * @property string|null $proyecto_Tesis
   * @property string|null $tecnologia
   * @property string|null $region
   * @property string|null $grupo_Taxonomico
   * @property int $id_primerDirection
   * @property string|null $primerReferenceCitation
   * @property string|null $primerSequence
   * @property string|null $primerName
   * @property string|null $genName
   * @property string|null $genAbrev
   * @property string $idPrimers
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr whereIdprimers($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr whereGenabrev($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr whereGenname($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr wherePrimername($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr wherePrimersequence($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr wherePrimerreferencecitation($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr whereIdPrimerdirection($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr whereGrupoTaxonomico($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr whereRegion($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr whereTecnologia($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr whereProyectoTesis($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr whereLongitudPrimer($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr whereLongitudAmplicon($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr whereGc($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr whereDnameltingpoint($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr whereAnnealingTemperature($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr wherePrimerstaff($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr whereFechaOrden($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr whereProveedor($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Tblprimersr>|Tblprimersr query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Tblprimersr extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Tblregistroslaboratorio
   *
   * @property string|null $geneticAccessionURI
   * @property string|null $geneticAccessionNumber
   * @property string|null $ordenSecuenciacion
   * @property string|null $sequencingStaff
   * @property string|null $fechaSecuenciacion
   * @property string|null $consensusSequence
   * @property string|null $tecnologia_secuenciacion
   * @property string|null $idPrimerR
   * @property string|null $idPrimerF
   * @property string|null $sampleDesignation
   * @property string|null $amplificationSuccessDetails
   * @property bool|null $amplificationSuccess
   * @property float|null $vol_ADN_PCR
   * @property string|null $idExtracciones
   * @property string|null $idFechaPCR
   * @property string $idRegistrosLaboratorio
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio whereIdregistroslaboratorio($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio whereIdfechapcr($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio whereIdextracciones($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio whereVolAdnPcr($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio whereAmplificationsuccess($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio whereAmplificationsuccessdetails($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio whereSampledesignation($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio whereIdprimerf($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio whereIdprimerr($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio whereTecnologiaSecuenciacion($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio whereConsensussequence($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio whereFechasecuenciacion($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio whereSequencingstaff($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio whereOrdensecuenciacion($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio whereGeneticaccessionnumber($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio whereGeneticaccessionuri($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Tblregistroslaboratorio>|Tblregistroslaboratorio query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Tblregistroslaboratorio extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\User
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $remember_token
   * @property string $password
   * @property \Illuminate\Support\Carbon|null $email_verified_at
   * @property string $email
   * @property string $name
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \Laravel\Sanctum\PersonalAccessToken> $tokens
   * @property-read int|null $tokens_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \Illuminate\Notifications\DatabaseNotification> $notifications
   * @property-read int|null $notifications_count
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmailVerifiedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePassword($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRememberToken($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class User extends \Illuminate\Foundation\Auth\User
  {
    //
  }

  /**
   * App\Models\VocabTblprimersPrimerdirection
   *
   * @property string|null $description
   * @property string $primerdirection_value
   * @property int $id_primerdirection
   * @method static \Illuminate\Database\Eloquent\Builder<VocabTblprimersPrimerdirection>|VocabTblprimersPrimerdirection whereIdPrimerdirection($value)
   * @method static \Illuminate\Database\Eloquent\Builder<VocabTblprimersPrimerdirection>|VocabTblprimersPrimerdirection wherePrimerdirectionValue($value)
   * @method static \Illuminate\Database\Eloquent\Builder<VocabTblprimersPrimerdirection>|VocabTblprimersPrimerdirection whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<VocabTblprimersPrimerdirection>|VocabTblprimersPrimerdirection newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<VocabTblprimersPrimerdirection>|VocabTblprimersPrimerdirection newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<VocabTblprimersPrimerdirection>|VocabTblprimersPrimerdirection query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class VocabTblprimersPrimerdirection extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

}